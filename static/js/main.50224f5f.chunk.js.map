{"version":3,"sources":["components/card.component/card.component.jsx","components/card-list.component/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","Response","json","users","this","filtermonsters","filter","toLowerCase","includes","type","placeholder","onChange","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAGaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,KACnE,6BAAML,EAAMG,QAAQG,OACpB,4BAAIN,EAAMG,QAAQI,YCFbC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SAECD,EAAMS,SAASC,KAAK,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WC4B5CO,G,wDAhCb,aAAc,IAAD,8BACX,gBAWFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAX1C,EAAKC,MAAO,CACVT,SAAU,GACVM,YAAa,IAJJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACL,SAAUc,S,oBAO/H,WACC,IAAD,EACmCC,KAAKN,MAA/BT,EADT,EACSA,SAAWM,EADpB,EACoBA,YACZU,EAAiBhB,EAASiB,QAAO,SAAAvB,GAAO,OAAIA,EAAQG,KAAKqB,cAAcC,SAASb,EAAYY,kBAClG,OACE,sBAAK1B,UAAU,MAAf,UACE,gDACA,uBAAO4B,KAAK,SAASC,YAAY,iBAAiBC,SAAUP,KAAKZ,iBACjE,cAAC,EAAD,CAAUH,SAAUgB,W,GA3BVO,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.50224f5f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css'\r\n\r\nexport const Card = props => {\r\n    return(\r\n        <div className=\"card-container\"> \r\n        <img src={`https://robohash.org/${props.monster.id}?set=set4`} alt=\"\"/>\r\n        <h2>{ props.monster.name}</h2>\r\n        <p>{props.monster.email}</p> \r\n        \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Card } from '../card.component/card.component'\r\nimport './card-list.style.css'\r\n\r\n\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n           {\r\n         props.monsters.map( monster => <Card key={monster.id} monster={monster}/>)\r\n       }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React , { Component } from 'react';\nimport { CardList } from './components/card-list.component/card-list.component'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state ={\n      monsters: [],\n      searchField: ''\n    };\n\n  }\n \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(Response => Response.json()).then(users => this.setState({monsters: users}))\n  }\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  \n  render()\n  {\n    const {monsters , searchField} = this.state;\n    const filtermonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>CHOSE YOUR PET</h1>\n        <input type=\"search\" placeholder='search pet....' onChange={this.onSearchChange} />\n        <CardList monsters={filtermonsters} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}